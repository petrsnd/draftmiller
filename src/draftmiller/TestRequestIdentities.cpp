// (c) 2017 petrsnd@gmail.com.  All rights reserved.

#include "DraftMillerContext.h"

#include <UnitTestSuite.h>
#include <ConsoleLogger.h>

using namespace DraftMiller;

// Anonymous namespace for registrations
namespace {

bool reg = DraftMillerContext::Instance()->Register( SSH_AGENTC_REQUEST_IDENTITIES,
                                                     []( const DmMessage::Ptr& message ) -> DmMessage::Ptr
    {
        ASSERT_ARE_EQUAL( message->Number, SSH_AGENTC_REQUEST_IDENTITIES );
        DmIdentitiesAnswer::Ptr identitiesAnswer = std::make_shared< DmIdentitiesAnswer >();
        identitiesAnswer->NumberKeys = 2;
        identitiesAnswer->Keys.push_back( { { 0x00, 0x01, 0x02, 0x03 }, "abcdef" } );
        identitiesAnswer->Keys.push_back( { { 0x10, 0x11, 0x12, 0x13 }, "uvwxyz" } );
        return identitiesAnswer;
    } );

}

// Real data
Buffer s_realRequestIdentities = { 0x00, 0x00, 0x00, 0x01, 0x0b };

Buffer s_realIdentitiesAnswer = {
    0x00, 0x00, 0x03, 0x60, 0x0c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x01,
    0x17, 0x00, 0x00, 0x00, 0x07, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61,
    0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00,
    0xb0, 0xbb, 0x6f, 0xc6, 0x5f, 0xf3, 0x8d, 0xff, 0xf5, 0x22, 0xf7, 0x16,
    0x1e, 0x72, 0xef, 0xa1, 0xc2, 0x83, 0x55, 0xf3, 0x38, 0xdb, 0x9b, 0x7f,
    0xc2, 0x59, 0x74, 0x4a, 0x0b, 0x15, 0x41, 0xce, 0x42, 0xe5, 0x60, 0xc0,
    0xc7, 0xd6, 0xe1, 0xc0, 0xbb, 0x7c, 0x06, 0xe7, 0x89, 0xf8, 0xe9, 0xf4,
    0x03, 0xdf, 0x02, 0x0b, 0xaa, 0xa9, 0x65, 0x93, 0x99, 0x43, 0x9e, 0x90,
    0xd0, 0xad, 0x86, 0xd1, 0x26, 0xe1, 0x68, 0x47, 0x53, 0xf7, 0xf2, 0x2e,
    0x53, 0x46, 0x64, 0xcc, 0x79, 0x5a, 0xb0, 0xe0, 0x73, 0xf4, 0x61, 0xe6,
    0x89, 0xab, 0x3b, 0x7b, 0x25, 0x68, 0x30, 0x00, 0x8c, 0xf7, 0x66, 0xf3,
    0x34, 0xd9, 0x6d, 0x75, 0x12, 0x3b, 0xb5, 0x5b, 0xbb, 0x6e, 0x85, 0xb6,
    0xd9, 0x47, 0x5f, 0xfc, 0xd5, 0x2d, 0x2e, 0xdc, 0x5c, 0x16, 0x3a, 0x8d,
    0xbc, 0xa6, 0x62, 0x90, 0x21, 0xfa, 0xc0, 0x87, 0xc3, 0x92, 0xc9, 0x3e,
    0x05, 0xb8, 0x73, 0x48, 0xa7, 0xd9, 0xe3, 0x31, 0x95, 0x43, 0x08, 0x52,
    0x4a, 0xd4, 0xb2, 0x6c, 0x7c, 0xed, 0x1c, 0xb3, 0x72, 0xbd, 0xc0, 0xc9,
    0x97, 0xbd, 0xf9, 0xf2, 0x5f, 0x31, 0xcb, 0xc1, 0x48, 0x81, 0x79, 0xe7,
    0x58, 0x1b, 0xf5, 0xa6, 0x05, 0x7b, 0x0d, 0x02, 0xac, 0x4e, 0x5d, 0x6c,
    0x7c, 0xbb, 0xac, 0x30, 0x34, 0xbc, 0xc5, 0x67, 0xb8, 0x52, 0xef, 0x0d,
    0xd4, 0x2e, 0xd4, 0xb4, 0x01, 0x82, 0x15, 0x68, 0xb3, 0x19, 0x3c, 0xea,
    0xfb, 0xe9, 0x85, 0xdb, 0x81, 0x10, 0xcd, 0x5f, 0x94, 0xd6, 0x44, 0xf5,
    0xfd, 0x39, 0xc8, 0x77, 0xa7, 0x85, 0xeb, 0x9a, 0xc2, 0x35, 0xbf, 0xd7,
    0x99, 0xf6, 0xa2, 0xb2, 0x2b, 0x80, 0x7a, 0x2a, 0x45, 0xd3, 0xac, 0x53,
    0xc5, 0x9a, 0x9c, 0xf8, 0x6b, 0xc3, 0x46, 0x43, 0x14, 0xaf, 0x73, 0xae,
    0xfd, 0xf1, 0xe3, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x17,
    0x00, 0x00, 0x00, 0x07, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61, 0x00,
    0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x99,
    0xff, 0x1e, 0xb4, 0xc7, 0x1b, 0x09, 0x0f, 0x07, 0x0e, 0xe5, 0x41, 0x0a,
    0xab, 0x56, 0xf8, 0x6c, 0x71, 0xb9, 0x0c, 0x85, 0xc7, 0x5e, 0x29, 0x90,
    0x1e, 0x17, 0x5e, 0x7d, 0x32, 0xd5, 0x44, 0xc9, 0x40, 0x93, 0x6f, 0x03,
    0xcb, 0x28, 0x03, 0xbc, 0x3b, 0x06, 0x50, 0x7d, 0x84, 0xf7, 0xdf, 0xe2,
    0xac, 0xb7, 0xd4, 0x31, 0x82, 0x96, 0x1e, 0x2c, 0xe1, 0x78, 0x23, 0x2e,
    0x46, 0x80, 0xc4, 0x43, 0x41, 0x46, 0xfd, 0x54, 0x74, 0x88, 0x5e, 0xf3,
    0xf0, 0xc9, 0x28, 0xc5, 0x8b, 0xd6, 0x31, 0x9c, 0x6b, 0xb2, 0x91, 0x37,
    0xba, 0x48, 0xb2, 0xe9, 0x60, 0x3c, 0xfe, 0x27, 0x08, 0xd2, 0x1c, 0xc8,
    0x27, 0xd0, 0x43, 0xf5, 0x15, 0x00, 0x52, 0x2c, 0xe2, 0x6d, 0x87, 0xe2,
    0x17, 0x52, 0xe5, 0xab, 0xc9, 0xdf, 0x05, 0xa4, 0x89, 0x5f, 0x48, 0xe6,
    0x91, 0x8b, 0x01, 0x60, 0x5d, 0xd0, 0x80, 0x93, 0xdc, 0x0f, 0x0c, 0xfe,
    0xc4, 0x35, 0x68, 0xfd, 0x05, 0xac, 0x09, 0x06, 0x99, 0x24, 0x4c, 0x42,
    0x80, 0x17, 0x26, 0xd9, 0x4c, 0x23, 0x59, 0x9d, 0x7f, 0x20, 0xd7, 0x65,
    0xb0, 0xac, 0xa1, 0x7f, 0xf3, 0x8e, 0xed, 0xc6, 0x3a, 0x31, 0x05, 0x0c,
    0xc1, 0x81, 0x0a, 0xcb, 0xf4, 0x5a, 0xb1, 0xd7, 0x68, 0x49, 0x2a, 0xc1,
    0x40, 0xba, 0x12, 0x6f, 0x58, 0xc5, 0x9a, 0xdb, 0x51, 0x6c, 0x12, 0xcb,
    0x53, 0x25, 0xfb, 0x19, 0x3a, 0x27, 0x30, 0x34, 0x93, 0x36, 0x81, 0x04,
    0x70, 0x30, 0x91, 0x99, 0x02, 0x27, 0x35, 0x93, 0x46, 0x2b, 0x1d, 0x7a,
    0x3f, 0x3f, 0xd0, 0x0f, 0x91, 0x86, 0x5b, 0x03, 0x20, 0xb2, 0xce, 0xae,
    0x89, 0x8b, 0x66, 0x38, 0xdd, 0xbb, 0x51, 0x0e, 0x6b, 0x4b, 0x6a, 0xcb,
    0x09, 0xc3, 0xad, 0x23, 0xc6, 0x2b, 0x31, 0x86, 0x2e, 0x1e, 0x1f, 0x6f,
    0x0a, 0x25, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x15, 0x00,
    0x00, 0x00, 0x07, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61, 0x00, 0x00,
    0x00, 0x01, 0x23, 0x00, 0x00, 0x01, 0x01, 0x00, 0xb1, 0x36, 0x39, 0x01,
    0xca, 0x88, 0x2d, 0xfa, 0xf9, 0xa5, 0x67, 0x21, 0x5b, 0x11, 0x52, 0x99,
    0x38, 0x7a, 0xa3, 0xe7, 0x74, 0xaf, 0xa9, 0x7f, 0x9f, 0x0d, 0xc0, 0x3b,
    0x03, 0x2c, 0xe7, 0xec, 0x8a, 0x04, 0xa1, 0x72, 0xbb, 0xf8, 0x31, 0x5f,
    0xcf, 0x0f, 0x3a, 0x9d, 0x77, 0xe9, 0xf5, 0x14, 0x70, 0xe0, 0xf2, 0x12,
    0x04, 0x5f, 0x20, 0x09, 0xf2, 0x69, 0xb8, 0x4c, 0xb0, 0x30, 0xf0, 0x31,
    0x05, 0x17, 0x34, 0xce, 0x8a, 0x1f, 0x57, 0xa8, 0x83, 0x2c, 0xa7, 0x7f,
    0xdd, 0xe1, 0x40, 0x20, 0x4a, 0x35, 0x56, 0x54, 0x79, 0xad, 0x07, 0xaa,
    0xf2, 0x46, 0xe4, 0x08, 0x0e, 0xd9, 0x5d, 0xa0, 0xb4, 0xae, 0xb0, 0x94,
    0xb1, 0x2c, 0x67, 0xef, 0x40, 0x00, 0x14, 0x42, 0xd9, 0xfc, 0x35, 0xe4,
    0x6d, 0x9f, 0x0a, 0x4f, 0x3d, 0xd1, 0x42, 0xf6, 0xf0, 0xf8, 0xe8, 0x74,
    0xff, 0x99, 0x91, 0xd4, 0xb2, 0x6d, 0x14, 0x71, 0x99, 0x82, 0x09, 0x2a,
    0xe3, 0xba, 0x98, 0x9e, 0x17, 0xbc, 0x13, 0x99, 0x98, 0x67, 0x47, 0x44,
    0xb6, 0x8c, 0xb3, 0x01, 0x4c, 0x6e, 0x67, 0x0e, 0x91, 0x97, 0x14, 0xfb,
    0xcf, 0x39, 0x6d, 0x9d, 0xd6, 0xc3, 0xb3, 0xe4, 0x58, 0xf7, 0x1e, 0x4a,
    0xec, 0xe0, 0xde, 0xb0, 0x54, 0x0a, 0x52, 0x11, 0x4e, 0xe1, 0xa1, 0x74,
    0x8a, 0xe3, 0xf8, 0xbb, 0x5c, 0x8e, 0x00, 0x4f, 0x67, 0x64, 0xa3, 0x4a,
    0xee, 0x0a, 0x73, 0xfa, 0x4b, 0xbb, 0xed, 0x29, 0x4a, 0xdd, 0x41, 0x33,
    0xa2, 0xac, 0x47, 0x8e, 0xc6, 0x10, 0xfd, 0xff, 0x14, 0x7d, 0x87, 0x3f,
    0xde, 0x42, 0x50, 0xdf, 0x7d, 0x5a, 0x59, 0x3b, 0x02, 0x03, 0xf1, 0xf9,
    0x2d, 0xfd, 0x26, 0xc3, 0x16, 0x12, 0x37, 0xdf, 0x7c, 0x20, 0xbe, 0x04,
    0xaf, 0xd4, 0x17, 0x58, 0xc8, 0x36, 0x16, 0xad, 0x7f, 0x2f, 0xbc, 0x33,
    0x00, 0x00, 0x00, 0x00
};


static void TestEncodeParseRequest()
{
    auto request = std::make_shared< DmRequestIdentities >();
    Buffer requestEncoded = DmEncodeMessage( request );
    auto requestParsed = DmParseMessage( requestEncoded );
    ASSERT_FALSE( std::dynamic_pointer_cast< DmRequestIdentities >( requestParsed ) == nullptr );
    ASSERT_ARE_EQUAL( request->Number, requestParsed->Number );
}

static void TestEncodeParseResponse()
{
    auto response = std::make_shared< DmIdentitiesAnswer >();
    response->NumberKeys = 3;
    response->Keys.push_back( { { 0x20, 0x21, 0x22, 0x23 }, "hello world!" } );
    response->Keys.push_back( { { 0x50, 0x51, 0x52, 0x53 }, "foobar" } );
    response->Keys.push_back( { { 0x50, 0x51, 0x52, 0x53, 0x60, 0x61, 0x62 }, "Magenta " } );
    Buffer responseEncoded = DmEncodeMessage( response );
    auto responseParsed = DmParseMessage( responseEncoded );
    ASSERT_FALSE( std::dynamic_pointer_cast< DmIdentitiesAnswer >( responseParsed ) == nullptr );
    ASSERT_ARE_EQUAL( response->Number, responseParsed->Number );
    ASSERT_ARE_EQUAL( response->NumberKeys, 3 );
    ASSERT_ARE_EQUAL( response->Keys[0].KeyBlob, Buffer( { 0x20, 0x21, 0x22, 0x23 } ) );
    ASSERT_ARE_EQUAL( response->Keys[0].Comment, "hello world!" );
    ASSERT_ARE_EQUAL( response->Keys[1].KeyBlob, Buffer( { 0x50, 0x51, 0x52, 0x53 } ) );
    ASSERT_ARE_EQUAL( response->Keys[1].Comment, "foobar" );
    ASSERT_ARE_EQUAL( response->Keys[2].KeyBlob, Buffer( { 0x50, 0x51, 0x52, 0x53, 0x60, 0x61, 0x62 } ) );
    ASSERT_ARE_EQUAL( response->Keys[2].Comment, "Magenta " );
}

static void TestRequestResponse()
{
    auto request = std::make_shared< DmRequestIdentities >();
    Buffer requestBuffer = DmEncodeMessage( std::dynamic_pointer_cast< DmMessage >( request ) );
    Buffer responseBuffer = DraftMillerContext::Instance()->HandleMessage( requestBuffer );
    auto message = DmParseMessage( responseBuffer );
    if ( message->Number == SSH_AGENT_FAILURE )
        throw UnitTestException( "DraftMillerContext return SSH_AGENT_FAILURE" );
    auto response = std::dynamic_pointer_cast< DmIdentitiesAnswer >( message );
    ASSERT_FALSE( response == nullptr );
    ASSERT_ARE_EQUAL( response->Number, SSH_AGENT_IDENTITIES_ANSWER );
    ASSERT_ARE_EQUAL( response->NumberKeys, 2 );
    ASSERT_ARE_EQUAL( response->Keys[0].KeyBlob, Buffer( { 0x00, 0x01, 0x02, 0x03 } ) );
    ASSERT_ARE_EQUAL( response->Keys[0].Comment, "abcdef" );
    ASSERT_ARE_EQUAL( response->Keys[1].KeyBlob, Buffer( { 0x10, 0x11, 0x12, 0x13 } ) );
    ASSERT_ARE_EQUAL( response->Keys[1].Comment, "uvwxyz" );
}

static void TestRealData()
{
    Buffer expectedRequestIdentities( s_realRequestIdentities );
    Buffer expectedIdentitiesAnswer( s_realIdentitiesAnswer );
    auto requestIdentities = DmParseMessage( s_realRequestIdentities );
    auto identitiesAnswer = DmParseMessage( s_realIdentitiesAnswer );
    ASSERT_FALSE( requestIdentities == nullptr );
    ASSERT_FALSE( identitiesAnswer == nullptr );
    Buffer requestIdentitiesEncoded = DmEncodeMessage( requestIdentities );
    Buffer identitiesAnswerEncoded = DmEncodeMessage( identitiesAnswer );
    ASSERT_ARE_EQUAL( expectedRequestIdentities, requestIdentitiesEncoded );
    ASSERT_ARE_EQUAL( expectedIdentitiesAnswer, identitiesAnswerEncoded );
}

int main( int argc, char** argv )
{
    RegisterConsoleLogger( LoggerDebugLevel::LEVEL_9 );
    bool testsAllPassed;
    DECLARE_UNIT_TEST_SUITE( RequestIdentities )
        ADD_UNIT_TEST( RequestIdentities, TestEncodeParseRequest );
        ADD_UNIT_TEST( RequestIdentities, TestEncodeParseResponse );
        ADD_UNIT_TEST( RequestIdentities, TestRequestResponse );
        ADD_UNIT_TEST( RequestIdentities, TestRealData );
    END_UNIT_TEST_SUITE( RequestIdentities, testsAllPassed )

    return ( testsAllPassed ? 0 : 1 );
}
